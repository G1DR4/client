buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.14.1'
    }
}

apply plugin: 'com.android.application'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def gitDirty = 'git diff --name-only HEAD'.execute([], project.rootDir).text.trim().size() > 0
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

dependencies {
    // Build plugins
    // TODO(dxchen): Figure out why removing this causes a Dagger error.
    provided 'com.github.frankiesardo:auto-parcel-processor:0.2' // Automatic Parcelables
    provided 'com.squareup.dagger:dagger-compiler:1.2.2' // Dependency injection
    // provided 'com.stanfy.spoon:spoon-gradle-plugin:0.14.1' // Test multiplexing/selection

    // Local .jar dependencies
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Local project dependencies
    compile project(':odkcollect')

    // External dependencies
    compile 'com.android.support:appcompat-v7:21.0.0'
    compile 'com.android.support:cardview-v7:21.0.0'
    compile 'com.android.support:recyclerview-v7:21.0.0'
    compile 'com.android.support:support-v4:21.0.0'
    compile 'com.github.zafarkhaja:java-semver:0.8.0' // Semantic versioning
    compile 'com.google.code.gson:gson:2.3' // JSON parser
    compile 'com.google.guava:guava:18.0' // Google common libraries
    compile 'com.jakewharton:butterknife:5.1.2' // View injection
    compile 'com.mcxiaoke.volley:library:1.0.6' // HTTP framework
    compile 'com.joanzapata.android:android-iconify:1.0.8' // Font-based icons
    compile 'com.squareup.dagger:dagger:1.2.2' // Dependency injection
    compile 'de.greenrobot:eventbus:2.4.0' // The event bus
    compile 'joda-time:joda-time:2.5' // Better dates and times

    // Testing
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestCompile('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.google.guava'
        exclude group: 'com.squareup.dagger' // Provided by com.squareup.dagger
        exclude group: 'javax.inject' // Provided by com.squareup.dagger
    }
    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.1'
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    compile files('libs/sqlcipher.jar')
}

apply plugin: 'spoon'

spoon {
    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName
    }
}

// Consider spoon to always be "out-of-date" so that spoon tests will run (when requested) even
// when no changes have been made to the build.
tasks["spoon"].outputs.upToDateWhen { false }

// Development builds get the lowest possible version code, so that any release
// build will be considered an upgrade over any development build.
def versionInteger = 0

// Development builds get a version name that identifies the commit.
def versionString = gitSha.substring(0, 7) + (gitDirty ? '+' : '')

// For a release build, use -PversionNumber=1.2.3 to set the version number.  All its
// parts should be numeric, and there should be at most 3 parts (e.g. 1, 1.2, or 1.2.3).
if (project.hasProperty('versionNumber')) {
    // The version number is converted to an integer for the version code, and
    // normalized to a string for the version name.  The normalization formats
    // integers canonically and drops trailing zeroes (e.g. '0.001.0' becomes '0.1').
    def versionParts = project.versionNumber.split('\\.').toList()
    assert versionParts.size >= 1 && versionParts.size() <= 3
    versionParts.addAll(['0', '0'])
    def versionMajor = versionParts[0].toInteger()
    def versionMinor = versionParts[1].toInteger()
    def versionPatch = versionParts[2].toInteger()
    assert versionMajor < 100
    assert versionMinor < 100
    assert versionPatch < 10000
    versionInteger = versionMajor * 1000000 + versionMinor * 10000 + versionPatch
    versionString = '' + versionMajor + '.' + versionMinor + '.' + versionPatch;
    versionString = versionString.replaceAll('\\.0$', '');
    versionString = versionString.replaceAll('\\.0$', '');
}
logger.info("Version number: ${versionString}")
logger.info("Version code: ${versionInteger}")

// This is where to look for the .apk signing key.
def releaseRepoRoot = file('../../release/')

// OpenMRS instance for development (kept at tip of dev branch).
def openmrsRootUrlDev = 'http://dev.projectbuendia.org:9000/openmrs'

// OpenMRS instance for integration testing server.
def openmrsRootUrlIntegration = 'http://integration.projectbuendia.org:9000/openmrs'

// OpenMRS root URL for Edison on local network (default for dev tablets).
def openmrsRootUrlEdison = 'http://server:9000/openmrs'

// OpenMRS root URL for host machine when client runs in an emulator (AVD).
def openmrsRootUrlLocalhost = 'http://10.0.2.2:9000/openmrs'

// Just for development.  In production builds, these should be overridden
// using -PopenmrsRootUrl=url -PopenmrsUser=user -PopenmrsPassword=pass etc.
def openmrsRootUrlDefault = openmrsRootUrlEdison;
def openmrsUserDefault = 'buendia'
def openmrsPasswordDefault = 'buendia'
def packageServerRootUrlDefault = 'http://packages.projectbuendia.org:9001/'

// Apply overrides such as -PopenmrsRootUrl=url etc.
def openmrsRootUrl = project.hasProperty('openmrsRootUrl') ? project.openmrsRootUrl : openmrsRootUrlDefault
def openmrsUser = project.hasProperty('openmrsUser') ? project.openmrsUser : openmrsUserDefault
def openmrsPassword = project.hasProperty('openmrsPassword') ? project.openmrsPassword : openmrsPasswordDefault
def packageServerRootUrl = project.hasProperty('packageServerRootUrl') ? project.packageServerRootUrl : packageServerRootUrlDefault

logger.info("Default preference values:")
logger.info("OpenMRS root URL: ${openmrsRootUrl}")
logger.info("OpenMRS user: ${openmrsUser}")
logger.info("OpenMRS password: ${openmrsPassword}")
logger.info("Package server root URL: ${packageServerRootUrl}")

android {
    compileSdkVersion 21
    buildToolsVersion "19.1.0"

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        applicationId "org.msf.records"

        minSdkVersion 19
        targetSdkVersion 19

        versionCode versionInteger
        versionName versionString

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        testApplicationId 'org.msf.records.test'
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"

        resValue "string", "openmrs_root_url_default", openmrsRootUrl
        resValue "string", "openmrs_user_default", openmrsUser
        resValue "string", "openmrs_password_default", openmrsPassword
        resValue "string", "package_server_root_url_default", packageServerRootUrl

        // Allow different sync adapters to be defined for debug and release builds.
        resValue "string", "sync_authority", applicationId + '.provider.records'
        resValue "string", "account_type", applicationId
        buildConfigField "String", "ACCOUNT_TYPE", "\"${defaultConfig.applicationId}\""
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    signingConfigs {
        release {
            storeFile file(new File(releaseRepoRoot, 'keys/org.msf.records.jks'))
            storePassword ''
            keyAlias 'org.msf.records'
            keyPassword ''
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
    }

    lintOptions {
        lintConfig file('lint.xml')

        htmlReport false
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'

            resValue "string", "sync_authority", defaultConfig.applicationId + '.dev.provider.records'
            resValue "string", "account_type", defaultConfig.applicationId + '.dev'
            buildConfigField "String", "ACCOUNT_TYPE", "\"${defaultConfig.applicationId}.dev\""

            // For release builds, it's useful to include the real build time.
            // However, including the time would force recompilation on every run
            // even when no code has changed; so for debug builds, use a constant.
            buildConfigField "String", "BUILD_TIME", "\"[debug]\""
        }

        release {
            // noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }
    }
}

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(':app:assembleRelease')) {
            def pass
            if (!android.signingConfigs.release.storeFile.exists()) {
                throw new IllegalStateException("To perform a release build, you must have the release repo cloned at ${releaseRepoRoot}.")
            }
            if (System.console() == null) {
                throw new IllegalStateException("Assembling the release build only works from command line with the Gradle Daemon disabled. Please run ./gradlew :app:assembleRelease.");
            }

            pass = System.console().readPassword("\nPlease enter key passphrase: ")
            pass = new String(pass)

            if (pass.size() <= 0) {
                throw new IllegalArgumentException("You must enter a password to proceed.")
            }

            android.signingConfigs.release.storePassword = pass
            android.signingConfigs.release.keyPassword = pass
        }
}
