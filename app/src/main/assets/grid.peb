<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<!-- Specify font sizes in em (1 em = 10 sp). -->
<!-- Specify margins and paddings in px (1 px = 1 dp). -->
<!-- Specify borders using background-image: linear-gradient. -->

<style>
  body { margin: 0; }
  table { background: #fff; }  /* opaque so that frozen headers are opaque */
  th, td {
    font-weight: normal;
    font-size: 2.4em;
    padding: 8px 0;
    text-align: left;
    vertical-align: baseline;
    background-image: linear-gradient(
        90deg, transparent 33%, rgba(0, 0, 0, 0.2) 33%, rgba(0, 0, 0, 0.2));
    background-size: 1px 100%;
    background-repeat: no-repeat;
    background-position: right;
  }
  th { white-space: nowrap; padding: 8px 16px; }

  thead th { text-align: center; font-size: 1.8em; }
  .obs td, .order td { text-align: center; min-width: 3em; }

  .now { font-weight: bold; background: #e0f0ff; }
  tr:nth-child(even) { background: #f8f8f8; }
  tr:nth-child(even) .now { background: #d8e8f8; }

  th[scope="rowgroup"] {
    text-transform: uppercase;
    font-size: 1.8em;
    font-weight: bold;
    background: #fff;
  }
  tbody + tbody th[scope="rowgroup"] {
    padding-top: 3.6em;
  }
  th[scope="row"] { max-width: 16em; overflow: hidden; }

  .order .future { font-size: 75%; color: #999; vertical-align: center; }
  .order .stop { font-weight: bold; color: #f66; font-size: 60%; text-transform: uppercase; }

  .command {
    color: #09e;
    background: #fff;
    font-weight: bold;
    text-transform: uppercase;
    font-size: 1.8em;
    padding-top: 1em;
    padding-bottom: 3em;
  }
</style>

<script src="jquery-1.5.1.min.js"></script>
<script src="freezeheader.js"></script>
<script>
$(document).ready(function() {
  $('#grid').freezeHeader({top: true, left: true});
});
</script>

<table id="grid" cellspacing="0" cellpadding="0">
  <thead>
    <tr>
      <th></th>
      {% for column in columns %}
        <th class="{{column.start == nowColumnStart ? "now" : ""}}" scope="col">
          {{column.headingHtml | raw}}
        </th>
      {% endfor %}
    </tr>
  </thead>

  <tbody>
    <tr>
      <th scope="rowgroup">
        Observations
      </th>
    </tr>
    {% for row in rows %}
      <tr class="obs">
        <th scope="row">
          {{row.heading}}
        </th>
        {% for column in columns %}
          {% set values = get_values(row=row, column=column) %}
          <td class="{{column.start == nowColumnStart ? "now" : ""}}"
             onclick="popup({{row.heading | js}},
            {% if values is empty %}
              []
            {% else %}
              [ {%- for value in values -%}
                [{% if value.name != null %}{{value.name | js}}
                {% elseif value.text != null %}{{value.text | js}}
                {% elseif value.number != null %}{{value.number | js}}
                {% else %}{{value.bool ? "'Yes'" : "'No'"}}{% endif %},
                {{value.observed | dateformat("HH:mm") | js}}],
              {%- endfor -%} ]
            {% endif %} )">
            {% if values is not empty %}
              {% set last = values | last %}
              {% if last.number != null %}
                {{values | avg | numberformat("#.#")}}
              {% elseif last.abbrev != null %}
                {{last.abbrev}}
              {% elseif last.text != null %}
                <div onclick="alert(''
                  {%- for value in values -%}
                    + '---- '
                    + {{value.observed | dateformat("dd MMM 'at' HH:mm") | js}}
                    + ' ----\n'
                    + {{value.text | js}}
                    + '\n\n'
                  {%- endfor -%})">&#x1f4dd;</div>
              {% elseif last.bool != null %}
                {{(values | max).bool ? "&#x25cf;" : "" | raw}}
              {% endif %}
            {% endif %}
          </td>
        {% endfor %}
      </tr>
    {% endfor %}
  </tbody>

  <tbody>
    <tr>
      <th scope="rowgroup">
        Treatment Plan
      </th>
    </tr>
    {% for order in orders %}
      <tr class="order">
        <th scope="row">
          {{order.instructions}}
        </th>
        {% set previousActive = false %}
        {% set future = false %}
        {% for column in columns %}
          <td class="{{column.start == nowColumnStart ? "now" : ""}}">
            {% set active = intervals_overlap(order.interval, column.interval) %}
            {% if order.stop == null and previousActive %}
              <div class="future">&nbsp;</div>
            {% elseif order.stop != null and previousActive and not active %}
              <div class="stop">Stop</div>
            {% elseif active %}
              {% if future %}
                <div class="future active">&#x25cf;</div>
              {% else %}
                {% set count = get_order_execution_count(order_uuid=order.uuid, column=column) %}
                <div class="past active"
                    onclick="controller.onOrderCellPressed('{{order.uuid}}', {{column.start.getMillis}})"
                    >{{count}}</div>
              {% endif %}
            {% endif %}
            {% set previousActive = active %}
            {% set future = future or column.start == nowColumnStart %}
          </td>
        {% endfor %}
      </tr>
    {% endfor %}

    <tr>
      <th class="command" onclick="controller.onNewOrderPressed()">
        Add a New Treatment
      </th>
    </tr>
  </tbody>

  <script>
    function popup(name, values) {
      var dialog = document.getElementById('obs-dialog');
      var html = '<h2>' + name + '</h2>';
      var text = name + '\n\n';
      if (values.length > 0) {
        for (var i = 0; i < values.length; i++) {
          var value = values[i][0], observed = values[i][1];
          html += '<b>' + value + '</b> at ' + observed + '<br>';
          text += value + ' at ' + observed + '\n';
        }
        html += '&nbsp;<br>Comments <input type="text" size="40">';
      } else {
        html += 'No observations.';
        text += 'No observations.';
      }
      alert(text);
      return;
      dialog.innerHTML = html;
      dialog.showModal();
    }
  </script>
</table>